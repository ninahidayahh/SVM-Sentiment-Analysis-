# -*- coding: utf-8 -*-
"""Exploratory Data Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NmTCO-NO3suxUyd_HsoLqKabZNumYjY-
"""

import pandas as pd

from google.colab import files
uploaded = files.upload()

# Reading files after upload
dataframe = pd.read_excel('data_bca.xlsx')

dataframe.shape

# Extract the required columns
data = dataframe[['content','at','score']]

#Rename columns
data = data.rename(columns={'content':'Comment', 'at':'Date'})

data

"""### We will label the sentiment negative/positive based on the rating score given"""

data['score'].value_counts()

# labeling data
# Then scores 1-3 will be labeled negative and score 4-5 will be labeled positive
data['label'] = data['score'].apply(lambda x: 'Positif' if x >= 4 else 'Negatif')

data.drop('Date', axis=1, inplace=True)

data.head()

"""###Get the dummy variable for value"""

df = pd.DataFrame(data)

# Create a dummy variable
dummy = pd.get_dummies(df['label'],prefix='label')

# Concatenate dataframes
df = pd.concat([df, dummy], axis=1)

df[['label_Negatif', 'label_Positif']] = df[['label_Negatif', 'label_Positif']].astype(int)

df

"""###see the proportion of negative and positive label data"""

# Aggregate numbers by sentiment using sum
sentiment_prop = df.groupby(['label']).sum(numeric_only=True).drop(columns='score')

sentiment_prop

#Count the total number of comments
total_comments = len(df)

# Compute the proportion
sentiment_prop['Proportion'] = sentiment_prop.sum(axis=1) / total_comments
# Reset index
sentiment_prop.reset_index(inplace=True)

sentiment_prop

import seaborn as sns
import matplotlib.pyplot as plt

colors = {'Positif': '#9EC8B9' , 'Negatif': '#750E21'}
# Visualization using Seaborn
plt.figure(figsize=(8, 6))
sns.barplot(x='label', y='Proportion', data=sentiment_prop, palette=colors)
plt.title('Proporsi Sentimen')
plt.ylabel('Proporsi')
plt.xlabel('Sentiment')
plt.ylim(0, 1)  # Batas y dari 0 hingga 1
plt.show()

#grouping data
sentiment_counts = data.groupby(by='label', as_index=False).agg(Total=('label','count'))

sentiment_counts

import plotly.express as px

# Create a Bar Chart for Sentiment Proportions (Positive & Negative)
fig = px.bar(
    sentiment_counts,  # Data untuk Bar Chart
    x='label',  # Kategori Sentimen (Positif/Negatif)
    y='Total',  # Total jumlah untuk setiap Sentimen
    color='label',  # Warna berdasarkan Sentimen
    color_discrete_sequence=['#750E21', '#9EC8B9'],  # Warna untuk Sentimen (Negatif dan Positif)
    title='<b>Proporsi Sentimen Pelanggan</b><br><sup>Lebih dari setengah responden merasa pelayanan <span style="color:#750E21;">tidak memuaskan</span>',
    labels={'Total': 'Jumlah Review', 'Sentiment': 'Sentimen'},  # Label untuk sumbu X dan Y
    text='Total'  # Menampilkan nilai total pada batang grafik
)

# Atur tampilan label dan judul
fig.update_traces(
    textposition='outside',  # Menampilkan nilai total di luar batang
    hovertemplate='<b>%{x}</b><br>%{y} Review'  # Menampilkan informasi saat hover
)

# Atur layout grafik
fig.update_layout(
    width=500,  # Lebar grafik
    height=450,  # Tinggi grafik
    showlegend=False,  # Menyembunyikan legend
    title=dict(
        text='<b>Proporsi Sentimen Pelanggan</b><br><sup>Lebih dari setengah responden merasa pelayanan <span style="color:#750E21;">tidak memuaskan</span>',
        font=dict(size=20),
        y=0.95,
        x=0.5
    ),
    xaxis_title='Sentimet',  # Judul sumbu X
    yaxis_title='Jumlah Review'  # Judul sumbu Y
)

# Show grafik
fig.show()

from wordcloud import WordCloud

all_text = ' '.join(word for word in df['Comment'])

# Create word cloud
wordcloud = WordCloud(width=800, height=400, background_color='white').generate(all_text)

# Show a word cloud
plt.figure(figsize=(10, 5))
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis('off')
plt.margins(x=0, y=0)
plt.show()
